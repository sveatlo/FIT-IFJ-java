#ifndef PRECEDENCE_TABLE_H
#define PRECEDENCE_TABLE_H

#include "expression.h"

/**
 *  Precedence table defines all combinations of top of the stack/input token and priorities between them.
 *  Rows mean top of the stack and columns mean input token.
 *
 *  @ingroup Expression
 **/

const TokenPrecedence precedenceTable[][STT_STRING] = {
    [STT_PLUS] = {
        [STT_PLUS] = H,
        [STT_MINUS] = H,
        [STT_MULTIPLY] = L,
        [STT_DIVIDE] = L,
        [STT_LESS] = H,
        [STT_GREATER] = H,
        [STT_LESS_EQUALS] = H,
        [STT_GREATER_EQUALS] = H,
        [STT_LOGIC_EQUAL] = H,
        [STT_LOGIC_NOT_EQUAL] = H,
        [STT_AND] = H,
        [STT_OR] = H,
        [STT_NEGATE] = L,
        [STT_LEFT_PARENTHESE] = L,
        [STT_RIGHT_PARENTHESE] = H,
        [STT_IDENT] = L
    },
    [STT_MINUS] = {
        [STT_PLUS] = H,
        [STT_MINUS] = H,
        [STT_MULTIPLY] = L,
        [STT_DIVIDE] = L,
        [STT_LESS] = H,
        [STT_GREATER] = H,
        [STT_LESS_EQUALS] = H,
        [STT_GREATER_EQUALS] = H,
        [STT_LOGIC_EQUAL] = H,
        [STT_LOGIC_NOT_EQUAL] = H,
        [STT_AND] = H,
        [STT_OR] = H,
        [STT_NEGATE] = L,
        [STT_LEFT_PARENTHESE] = L,
        [STT_RIGHT_PARENTHESE] = H,
        [STT_IDENT] = L
    },
    [STT_MULTIPLY] = {
        [STT_PLUS] = H,
        [STT_MINUS] = H,
        [STT_MULTIPLY] = H,
        [STT_DIVIDE] = H,
        [STT_LESS] = H,
        [STT_GREATER] = H,
        [STT_LESS_EQUALS] = H,
        [STT_GREATER_EQUALS] = H,
        [STT_LOGIC_EQUAL] = H,
        [STT_LOGIC_NOT_EQUAL] = H,
        [STT_AND] = H,
        [STT_OR] = H,
        [STT_NEGATE] = L,
        [STT_LEFT_PARENTHESE] = L,
        [STT_RIGHT_PARENTHESE] = H,
        [STT_IDENT] = L
    },
    [STT_DIVIDE] = {
        [STT_PLUS] = H,
        [STT_MINUS] = H,
        [STT_MULTIPLY] = H,
        [STT_DIVIDE] = H,
        [STT_LESS] = H,
        [STT_GREATER] = H,
        [STT_LESS_EQUALS] = H,
        [STT_GREATER_EQUALS] = H,
        [STT_LOGIC_EQUAL] = H,
        [STT_LOGIC_NOT_EQUAL] = H,
        [STT_AND] = H,
        [STT_OR] = H,
        [STT_NEGATE] = L,
        [STT_LEFT_PARENTHESE] = L,
        [STT_RIGHT_PARENTHESE] = H,
        [STT_IDENT] = L
    },
    [STT_LESS] = {
        [STT_PLUS] = L,
        [STT_MINUS] = L,
        [STT_MULTIPLY] = L,
        [STT_DIVIDE] = L,
        [STT_LESS] = H,
        [STT_GREATER] = H,
        [STT_LESS_EQUALS] = H,
        [STT_GREATER_EQUALS] = H,
        [STT_LOGIC_EQUAL] = H,
        [STT_LOGIC_NOT_EQUAL] = H,
        [STT_AND] = H,
        [STT_OR] = H,
        [STT_NEGATE] = L,
        [STT_LEFT_PARENTHESE] = L,
        [STT_RIGHT_PARENTHESE] = H,
        [STT_IDENT] = L
    },
    [STT_GREATER] = {
        [STT_PLUS] = L,
        [STT_MINUS] = L,
        [STT_MULTIPLY] = L,
        [STT_DIVIDE] = L,
        [STT_LESS] = H,
        [STT_GREATER] = H,
        [STT_LESS_EQUALS] = H,
        [STT_GREATER_EQUALS] = H,
        [STT_LOGIC_EQUAL] = H,
        [STT_LOGIC_NOT_EQUAL] = H,
        [STT_AND] = H,
        [STT_OR] = H,
        [STT_NEGATE] = L,
        [STT_LEFT_PARENTHESE] = L,
        [STT_RIGHT_PARENTHESE] = H,
        [STT_IDENT] = L
    },
    [STT_LESS_EQUALS] = {
        [STT_PLUS] = L,
        [STT_MINUS] = L,
        [STT_MULTIPLY] = L,
        [STT_DIVIDE] = L,
        [STT_LESS] = H,
        [STT_GREATER] = H,
        [STT_LESS_EQUALS] = H,
        [STT_GREATER_EQUALS] = H,
        [STT_LOGIC_EQUAL] = H,
        [STT_LOGIC_NOT_EQUAL] = H,
        [STT_AND] = H,
        [STT_OR] = H,
        [STT_NEGATE] = L,
        [STT_LEFT_PARENTHESE] = L,
        [STT_RIGHT_PARENTHESE] = H,
        [STT_IDENT] = L
    },
    [STT_GREATER_EQUALS] = {
        [STT_PLUS] = L,
        [STT_MINUS] = L,
        [STT_MULTIPLY] = L,
        [STT_DIVIDE] = L,
        [STT_LESS] = H,
        [STT_GREATER] = H,
        [STT_LESS_EQUALS] = H,
        [STT_GREATER_EQUALS] = H,
        [STT_LOGIC_EQUAL] = H,
        [STT_LOGIC_NOT_EQUAL] = H,
        [STT_AND] = H,
        [STT_OR] = H,
        [STT_NEGATE] = L,
        [STT_LEFT_PARENTHESE] = L,
        [STT_RIGHT_PARENTHESE] = H,
        [STT_IDENT] = L
    },
    [STT_LOGIC_EQUAL] = {
        [STT_PLUS] = L,
        [STT_MINUS] = L,
        [STT_MULTIPLY] = L,
        [STT_DIVIDE] = L,
        [STT_LESS] = L,
        [STT_GREATER] = L,
        [STT_LESS_EQUALS] = L,
        [STT_GREATER_EQUALS] = L,
        [STT_LOGIC_EQUAL] = H,
        [STT_LOGIC_NOT_EQUAL] = H,
        [STT_AND] = H,
        [STT_OR] = H,
        [STT_NEGATE] = L,
        [STT_LEFT_PARENTHESE] = L,
        [STT_RIGHT_PARENTHESE] = H,
        [STT_IDENT] = L
    },
    [STT_LOGIC_NOT_EQUAL]   = {
        [STT_PLUS] = L,
        [STT_MINUS] = L,
        [STT_MULTIPLY] = L,
        [STT_DIVIDE] = L,
        [STT_LESS] = L,
        [STT_GREATER] = L,
        [STT_LESS_EQUALS] = L,
        [STT_GREATER_EQUALS] = L,
        [STT_LOGIC_EQUAL] = H,
        [STT_LOGIC_NOT_EQUAL] = H,
        [STT_AND] = H,
        [STT_OR] = H,
        [STT_NEGATE] = L,
        [STT_LEFT_PARENTHESE] = L,
        [STT_RIGHT_PARENTHESE] = H,
        [STT_IDENT] = L
    },
    [STT_AND]               = {
        [STT_PLUS] = L,
        [STT_MINUS] = L,
        [STT_MULTIPLY] = L,
        [STT_DIVIDE] = L,
        [STT_LESS] = L,
        [STT_GREATER] = L,
        [STT_LESS_EQUALS] = L,
        [STT_GREATER_EQUALS] = L,
        [STT_LOGIC_EQUAL] = L,
        [STT_LOGIC_NOT_EQUAL] = L,
        [STT_AND] = H,
        [STT_OR] = H,
        [STT_NEGATE] = L,
        [STT_LEFT_PARENTHESE] = L,
        [STT_RIGHT_PARENTHESE] = H,
        [STT_IDENT] = L
    },
    [STT_OR]                = {
        [STT_PLUS] = L,
        [STT_MINUS] = L,
        [STT_MULTIPLY] = L,
        [STT_DIVIDE] = L,
        [STT_LESS] = L,
        [STT_GREATER] = L,
        [STT_LESS_EQUALS] = L,
        [STT_GREATER_EQUALS] = L,
        [STT_LOGIC_EQUAL] = L,
        [STT_LOGIC_NOT_EQUAL] = L,
        [STT_AND] = L,
        [STT_OR] = H,
        [STT_NEGATE] = L,
        [STT_LEFT_PARENTHESE] = L,
        [STT_RIGHT_PARENTHESE] = H,
        [STT_IDENT] = L
    },
    [STT_NEGATE] = {
        [STT_PLUS] = H,
        [STT_MINUS] = H,
        [STT_MULTIPLY] = H,
        [STT_DIVIDE] = H,
        [STT_LESS] = H,
        [STT_GREATER] = H,
        [STT_LESS_EQUALS] = H,
        [STT_GREATER_EQUALS] = H,
        [STT_LOGIC_EQUAL] = H,
        [STT_LOGIC_NOT_EQUAL] = H,
        [STT_AND] = H,
        [STT_OR] = H,
        [STT_NEGATE] = L,
        [STT_LEFT_PARENTHESE] = L,
        [STT_RIGHT_PARENTHESE] = H,
        [STT_IDENT] = L
    },
    [STT_LEFT_PARENTHESE]   = {
        [STT_PLUS] = L,
        [STT_MINUS] = L,
        [STT_MULTIPLY] = L,
        [STT_DIVIDE] = L,
        [STT_LESS] = L,
        [STT_GREATER] = L,
        [STT_LESS_EQUALS] = L,
        [STT_GREATER_EQUALS] = L,
        [STT_LOGIC_EQUAL] = L,
        [STT_LOGIC_NOT_EQUAL] = L,
        [STT_AND] = L,
        [STT_OR] = L,
        [STT_NEGATE] = L,
        [STT_LEFT_PARENTHESE] = L,
        [STT_RIGHT_PARENTHESE] = E,
        [STT_IDENT] = L
    },
    [STT_RIGHT_PARENTHESE]  = {
        [STT_PLUS] = H,
        [STT_MINUS] = H,
        [STT_MULTIPLY] = H,
        [STT_DIVIDE] = H,
        [STT_LESS] = H,
        [STT_GREATER] = H,
        [STT_LESS_EQUALS] = H,
        [STT_GREATER_EQUALS] = H,
        [STT_LOGIC_EQUAL] = H,
        [STT_LOGIC_NOT_EQUAL] = H,
        [STT_AND] = H,
        [STT_OR] = H,
        [STT_NEGATE] = H,
        [STT_LEFT_PARENTHESE] = N,
        [STT_RIGHT_PARENTHESE] = H,
        [STT_IDENT] = N
    },
    [STT_IDENT]             = {
        [STT_PLUS] = H,
        [STT_MINUS] = H,
        [STT_MULTIPLY] = H,
        [STT_DIVIDE] = H,
        [STT_LESS] = H,
        [STT_GREATER] = H,
        [STT_LESS_EQUALS] = H,
        [STT_GREATER_EQUALS] = H,
        [STT_LOGIC_EQUAL] = H,
        [STT_LOGIC_NOT_EQUAL] = H,
        [STT_AND] = H,
        [STT_OR] = H,
        [STT_NEGATE] = N,
        [STT_LEFT_PARENTHESE] = N,
        [STT_RIGHT_PARENTHESE] = H,
        [STT_IDENT] = N
    } // ident
};

#endif
